'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createEventChannel = createEventChannel;
exports.createChannelSubscription = createChannelSubscription;

var _reduxSaga = require('redux-saga');

function createEventChannel(socket) {
  var event = arguments.length <= 1 || arguments[1] === undefined ? 'dispatch' : arguments[1];
  var buffer = arguments.length <= 2 || arguments[2] === undefined ? _reduxSaga.buffers.fixed() : arguments[2];

  return (0, _reduxSaga.eventChannel)(function (listener) {
    var handleEvent = function handleEvent(action, cb) {
      // notify the sender that the event is received
      if (typeof cb === 'function') {
        cb();
      }
      listener(action);
    };
    socket.on(event, handleEvent);
    return function () {
      return socket.off(event, handleEvent);
    };
  }, buffer);
}

function createChannelSubscription(socketOrExchange, channelName) {
  var buffer = arguments.length <= 2 || arguments[2] === undefined ? _reduxSaga.buffers.fixed() : arguments[2];

  return (0, _reduxSaga.eventChannel)(function (listener) {
    var handlePublish = function handlePublish(action, cb) {
      // notify the sender that the event is received
      if (typeof cb === 'function') {
        cb();
      }
      listener(action);
    };
    var channel = socketOrExchange.subscribe(channelName);
    channel.watch(handlePublish);

    return function () {
      channel.unwatch(handlePublish);
      // @TODO socketOrExchange.unsubscribe(channelName)
    };
  }, buffer);
}