'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.watchEmits = watchEmits;
exports.watchRequests = watchRequests;
exports.watchRemote = watchRemote;

var _reduxSaga = require('redux-saga');

var _effects = require('redux-saga/effects');

var _actions = require('./actions');

var _eventChannel = require('./eventChannel');

var _workers = require('./workers');

var _marked = [watchEmits, watchRequests, watchRemote].map(regeneratorRuntime.mark);

function watchEmits(socket) {
  return regeneratorRuntime.wrap(function watchEmits$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          return _context.delegateYield((0, _reduxSaga.takeEvery)(_actions.EMIT, _workers.handleEmit, socket), 't0', 1);

        case 1:
        case 'end':
          return _context.stop();
      }
    }
  }, _marked[0], this);
}

function watchRequests(socket) {
  return regeneratorRuntime.wrap(function watchRequests$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          return _context2.delegateYield((0, _reduxSaga.takeEvery)(_actions.REQUEST, _workers.handleRequest, socket), 't0', 1);

        case 1:
        case 'end':
          return _context2.stop();
      }
    }
  }, _marked[1], this);
}

function watchRemote(socket) {
  var event = arguments.length <= 1 || arguments[1] === undefined ? 'dispatch' : arguments[1];
  var chan, action;
  return regeneratorRuntime.wrap(function watchRemote$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return (0, _effects.call)(_eventChannel.createEventChannel, socket, event);

        case 2:
          chan = _context3.sent;

        case 3:
          if (!true) {
            _context3.next = 11;
            break;
          }

          _context3.next = 6;
          return (0, _effects.take)(chan);

        case 6:
          action = _context3.sent;
          _context3.next = 9;
          return (0, _effects.put)(action);

        case 9:
          _context3.next = 3;
          break;

        case 11:
        case 'end':
          return _context3.stop();
      }
    }
  }, _marked[2], this);
}